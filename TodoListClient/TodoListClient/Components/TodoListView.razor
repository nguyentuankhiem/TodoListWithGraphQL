@page "/todo-list"
@inject HttpClient HttpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar 
@using GraphQL 

<EditForm Model="_newTodoItem">
    <MudPaper Elevation="25" Class="pa-3 mb-3">
        <MudGrid Class="d-flex" Style="align-items:center">
            <MudItem xs="4">
                <MudTextField T="string" Label="Title" @bind-Value="_newTodoItem.Title"></MudTextField>
            </MudItem>
            <MudItem >
                <MudButton OnClick="CreateNew" Variant="Variant.Outlined" Color="Color.Success">Create new</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>
</EditForm>

<MudPaper Elevation="25">
    <MudSimpleTable Hover="true">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
                <th>Status</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _todoList)
            {
                <tr @key="item">
                    <MudTd>@item.Id</MudTd>
                    <MudTd Style="@(item.IsCompleted ? "text-decoration: line-through" : "")">@item.Title</MudTd>
                    <MudTd>
                       <MudIconButton Icon="@(item.IsCompleted ? Icons.Material.Filled.Done : Icons.Material.Filled.Error)"
                                      Color="@(item.IsCompleted ? Color.Success : Color.Warning)" OnClick="() => HandleCompleteTodoItem(item)"></MudIconButton>
                    </MudTd>
                    <MudTd>
                        <MudIconButton Color="Color.Error" OnClick="() => Delete(item)" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
                    </MudTd>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
</MudPaper>

@code {
        List<TodoItem> _todoList { get; set; } = new();
        TodoItem _newTodoItem { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        await GetTodoList();
    }

    async Task GetTodoList()
    {
        string query = @"query {
              todoList {
                id,
                title,
                createdAt,
                isCompleted,
              }
            }";

        var request = new GraphQLRequest() { Query = query };
        var result = await HttpClient.PostAsJsonAsync("https://localhost:44365/graphql", request);
        result.EnsureSuccessStatusCode();

        var data = await result.Content.ReadFromJsonAsync<GraphQLResponse<GraphQLTodoList>>();

        if (data != null)
        {
            _todoList = data.Data.TodoList.OrderBy(x => x.Id).ToList();
        }

    }

    async Task CreateNew()
    {
        if (!string.IsNullOrWhiteSpace(_newTodoItem.Title)) {
            string query = @"
            mutation($newTodo: CreateTodoItemInput) {   
              create(todoItem: $newTodo) {
                title
              }
            }
        ";

            var request = new GraphQLRequest()
            {
                Query = query,
                Variables = new
                {
                    newTodo = new
                    {
                        Title = _newTodoItem.Title
                    }
                }
            };

            var result = await HttpClient.PostAsJsonAsync("https://localhost:44365/graphql", request);
            result.EnsureSuccessStatusCode();
            Snackbar.Add("Created!", Severity.Success);

            await GetTodoList();

            _newTodoItem = new();
        }
    }

    async Task Update(TodoItem item)
    {
        string query = @"
            mutation update($updateTodo: TodoItemInput) {
                update(item: $updateTodo){
                createdAt,
                isCompleted
                }
            }";
        var request = new GraphQLRequest()
        {
            Query = query,
            Variables = new
            {
                updateTodo = new
                {
                    Id = item.Id,
                    Title = item.Title,
                    CreatedAt = item.CreatedAt,
                    IsCompleted = item.IsCompleted
                }
            }
        };
        var result = await HttpClient.PostAsJsonAsync("https://localhost:44365/graphql", request);
        result.EnsureSuccessStatusCode();

        await GetTodoList();

    }

    async Task HandleCompleteTodoItem(TodoItem item)
    {
        item.IsCompleted = !item.IsCompleted;
        await Update(item);
    }

    async Task Delete(TodoItem item)
    {
        var dialog = DialogService.Show<DeleteDialog>("Delete");
        var dialogResult = await dialog.Result;

        if (!dialogResult.Cancelled)
        {
            var query = @"mutation($deleteTodoItem: DeleteTodoItemInput) {
                          delete(todoItem: $deleteTodoItem) {
                            id
                          }
                    }";

            var request = new GraphQLRequest()
            {
                Query = query,
                Variables = new
                {
                    deleteTodoItem = new
                    {
                        Id = item.Id
                    }
                }
            };

            var result = await HttpClient.PostAsJsonAsync("https://localhost:44365/graphql", request);
            result.EnsureSuccessStatusCode();
            Snackbar.Add("Deleted!", Severity.Success);
            await GetTodoList();
        }
    }
}